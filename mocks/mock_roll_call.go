// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/roll_call/roll_call_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockRollCall is a mock of RollCall interface.
type MockRollCall struct {
	ctrl     *gomock.Controller
	recorder *MockRollCallMockRecorder
}

// MockRollCallMockRecorder is the mock recorder for MockRollCall.
type MockRollCallMockRecorder struct {
	mock *MockRollCall
}

// NewMockRollCall creates a new mock instance.
func NewMockRollCall(ctrl *gomock.Controller) *MockRollCall {
	mock := &MockRollCall{ctrl: ctrl}
	mock.recorder = &MockRollCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRollCall) EXPECT() *MockRollCallMockRecorder {
	return m.recorder
}

// NumberCodePost mocks base method.
func (m *MockRollCall) NumberCodePost(courseNameRollCallId map[string]int, numberCode map[string]string, deviceId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberCodePost", courseNameRollCallId, numberCode, deviceId)
	ret0, _ := ret[0].(error)
	return ret0
}

// NumberCodePost indicates an expected call of NumberCodePost.
func (mr *MockRollCallMockRecorder) NumberCodePost(courseNameRollCallId, numberCode, deviceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberCodePost", reflect.TypeOf((*MockRollCall)(nil).NumberCodePost), courseNameRollCallId, numberCode, deviceId)
}

// NumberCodeQuery mocks base method.
func (m *MockRollCall) NumberCodeQuery(rollcall map[string]int) (map[string]string, error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberCodeQuery", rollcall)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// NumberCodeQuery indicates an expected call of NumberCodeQuery.
func (mr *MockRollCallMockRecorder) NumberCodeQuery(rollcall interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberCodeQuery", reflect.TypeOf((*MockRollCall)(nil).NumberCodeQuery), rollcall)
}

// RollCallFinal mocks base method.
func (m *MockRollCall) RollCallFinal(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RollCallFinal", c)
}

// RollCallFinal indicates an expected call of RollCallFinal.
func (mr *MockRollCallMockRecorder) RollCallFinal(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollCallFinal", reflect.TypeOf((*MockRollCall)(nil).RollCallFinal), c)
}

// RollCallLogin mocks base method.
func (m *MockRollCall) RollCallLogin() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollCallLogin")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollCallLogin indicates an expected call of RollCallLogin.
func (mr *MockRollCallMockRecorder) RollCallLogin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollCallLogin", reflect.TypeOf((*MockRollCall)(nil).RollCallLogin))
}

// RollCallStatus mocks base method.
func (m *MockRollCall) RollCallStatus() (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollCallStatus")
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollCallStatus indicates an expected call of RollCallStatus.
func (mr *MockRollCallMockRecorder) RollCallStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollCallStatus", reflect.TypeOf((*MockRollCall)(nil).RollCallStatus))
}
