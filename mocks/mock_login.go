// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/login/login_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLogin is a mock of Login interface.
type MockLogin struct {
	ctrl     *gomock.Controller
	recorder *MockLoginMockRecorder
}

// MockLoginMockRecorder is the mock recorder for MockLogin.
type MockLoginMockRecorder struct {
	mock *MockLogin
}

// NewMockLogin creates a new mock instance.
func NewMockLogin(ctrl *gomock.Controller) *MockLogin {
	mock := &MockLogin{ctrl: ctrl}
	mock.recorder = &MockLoginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogin) EXPECT() *MockLoginMockRecorder {
	return m.recorder
}

// GetLoginPage mocks base method.
func (m *MockLogin) GetLoginPage() (string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginPage")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetLoginPage indicates an expected call of GetLoginPage.
func (mr *MockLoginMockRecorder) GetLoginPage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginPage", reflect.TypeOf((*MockLogin)(nil).GetLoginPage))
}

// Login mocks base method.
func (m *MockLogin) Login(username, password string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockLoginMockRecorder) Login(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockLogin)(nil).Login), username, password)
}
